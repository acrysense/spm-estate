"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // slim select
  var allSelect = document.querySelectorAll('.js-select');
  if (allSelect) {
    allSelect.forEach(function (item) {
      new SlimSelect({
        select: item
      });
    });
  }

  // range
  var rangeSliders = document.querySelectorAll('.new-stats-data__range-slider');
  if (rangeSliders) {
    rangeSliders.forEach(function (slider) {
      var parent = slider.closest('.new-stats-data__range');
      var inputs = [parent.querySelector('.range-field__input--min'), parent.querySelector('.range-field__input--max')];
      noUiSlider.create(slider, {
        start: [Number(slider.dataset.rangeStart), Number(slider.dataset.rangeEnd)],
        connect: true,
        range: {
          'min': Number(slider.dataset.rangeMin),
          'max': Number(slider.dataset.rangeMax)
        }
      });
      slider.noUiSlider.on('update', function (values, handle) {
        inputs[handle].value = Number(values[handle]).toFixed();
      });
      inputs.forEach(function (input, handle) {
        input.addEventListener('change', function () {
          slider.noUiSlider.setHandle(handle, Number(this.value).toFixed());
        });
        input.addEventListener('keydown', function (e) {
          var values = slider.noUiSlider.get();
          var value = Number(values[handle]);

          // [[handle0_down, handle0_up], [handle1_down, handle1_up]]
          var steps = slider.noUiSlider.steps();

          // [down, up]
          var step = steps[handle];
          var position;

          // 13 is enter,
          // 38 is key up,
          // 40 is key down.
          switch (e.which) {
            case 13:
              slider.noUiSlider.setHandle(handle, Number(this.value).toFixed());
              break;
            case 38:
              // Get step to go increase slider value (up)
              position = step[1];

              // false = no step is set
              if (position === false) {
                position = 1;
              }

              // null = edge of slider
              if (position !== null) {
                slider.noUiSlider.setHandle(handle, Number(value + position).toFixed());
              }
              break;
            case 40:
              position = step[0];
              if (position === false) {
                position = 1;
              }
              if (position !== null) {
                slider.noUiSlider.setHandle(handle, Number(value - position).toFixed());
              }
              break;
          }
        });
      });
    });
  }

  // new stats tabs
  var newStatsTabsItem = document.querySelectorAll('.new-stats-tabs__item');
  if (newStatsTabsItem) {
    newStatsTabsItem.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var parent = item.closest('.new-stats-tabs');
        parent.querySelectorAll('.new-stats-tabs__item').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        parent.querySelectorAll('.new-stats-tabs__wrapper').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        item.classList.add('is--active');
        var el = parent.querySelector('.is--active');
        var index = _toConsumableArray(parent.querySelectorAll('.new-stats-tabs__item')).indexOf(el);
        parent.querySelectorAll('.new-stats-tabs__wrapper')[index].classList.add('is--active');
      });
    });
  }

  // chart
  var gymData = {
    labels: ['со спортзалом', 'без спортзала'],
    datasets: [{
      label: 'Спортзалы в объектах',
      data: [8000, 2000],
      backgroundColor: ['#EE98BA', '#CCDAF5'],
      borderWidth: 0
    }]
  };
  var swimmingPoolsData = {
    labels: ['с бассейном', 'без бассейна'],
    datasets: [{
      label: 'Бассейны в объектах',
      data: [6000, 4000],
      backgroundColor: ['#799EE5', '#CCDAF5'],
      borderWidth: 0
    }]
  };
  var typeNewEstateData = {
    labels: ['виллы', 'апартаменты', 'semi-detached villas', 'таунхаусы', 'офисы', 'магазины', 'кафе и рестораны'],
    datasets: [{
      label: 'Типы новой недвижимости',
      data: [3500, 2100, 1600, 1200, 1200, 400, 400],
      backgroundColor: ['#799EE5', '#EE98BA', '#9DDFE0', '#AAA7F8', '#FFD27B', '#B1DD74', '#E6EDFA'],
      borderWidth: 0
    }]
  };
  var typeSellEstateData = {
    labels: ['виллы', 'апартаменты', 'semi-detached villas', 'таунхаусы', 'офисы', 'магазины', 'кафе и рестораны'],
    datasets: [{
      label: 'Типы новой недвижимости',
      data: [3500, 2100, 1600, 1200, 1200, 400, 400],
      backgroundColor: ['#799EE5', '#EE98BA', '#9DDFE0', '#AAA7F8', '#FFD27B', '#B1DD74', '#E6EDFA'],
      borderWidth: 0
    }]
  };
  var forecastsData = {
    // labels: [
    //   "Absence of OB",
    //   "Closeness",
    //   "Credibility",
    //   "Heritage",
    //   "M Disclosure",
    //   "Provenance",
    //   "Reliability",
    //   "Transparency"
    // ],
    // datasets: [
    //   {
    //     label: "American Express",
    //     backgroundColor: "pink",
    //     borderColor: "red",
    //     borderWidth: 1,
    //     data: [3, 5, 6, 7,3, 5, 6, 7]
    //   },
    //   {
    //     label: "Mastercard",
    //     backgroundColor: "lightblue",
    //     borderColor: "blue",
    //     borderWidth: 1,
    //     data: [4, 7, 3, 6, 10,7,4,6]
    //   },
    //   {
    //     label: "Paypal",
    //     backgroundColor: "lightgreen",
    //     borderColor: "green",
    //     borderWidth: 1,
    //     data: [10,7,4,6,9,7,3,10]
    //   },
    //   {
    //     label: "Visa",
    //     backgroundColor: "yellow",
    //     borderColor: "orange",
    //     borderWidth: 1,
    //     data: [6,9,7,3,10,7,4,6]
    //   }
    // ]
    labels: ["май 2023", "ноябрь 2023", "май 2024", "ноябрь 2024", "май 2025", "ноябрь 2025", "май 2026", "ноябрь 2026"],
    datasets: [{
      type: "line",
      backgroundColor: "#0048CE",
      borderColor: "#0048CE",
      data: [400, 800, 900, 1000, 1500, 2000, 2400, 2800]
    }, {
      label: "1",
      type: "bar",
      backgroundColor: "#FFD27B",
      data: [400, 600, 1000, 1000, 500, 2500, 3000, 1600]
    }, {
      label: "2",
      type: "bar",
      backgroundColor: "#FFD27B",
      data: [600, 1000, 1600, 1200, 1200, 2200, 2500, 1000]
    }, {
      label: "3",
      type: "bar",
      backgroundColor: "#FFD27B",
      data: [800, 1600, 1900, 400, 1000, 2500, 3000, 1200]
    }, {
      label: "4",
      type: "bar",
      backgroundColor: "#FFD27B",
      data: [1100, 1000, 2000, 200, 500, 2000, 3000, 1200]
    }]
  };
  var newProjectsData = {
    labels: ["01.02.22", "01.03.22", "01.04.22", "01.05.22", "01.06.22", "01.07.22"],
    datasets: [{
      label: "с бассейном",
      backgroundColor: "#799EE5",
      data: [300, 500, 300, 400, 300, 300]
    }, {
      label: "без бассейна",
      backgroundColor: "#CCDAF5",
      data: [100, 100, 100, 100, 100, 100]
    }]
  };
  var sellProjectsData = {
    labels: ["01.02.22", "01.03.22", "01.04.22", "01.05.22", "01.06.22", "01.07.22"],
    datasets: [{
      label: "с бассейном",
      backgroundColor: "#799EE5",
      data: [300, 500, 300, 400, 300, 300]
    }, {
      label: "без бассейна",
      backgroundColor: "#CCDAF5",
      data: [100, 100, 100, 100, 100, 100]
    }]
  };
  var newObjectsData = {
    labels: ["01.02.22", "01.03.22", "01.04.22", "01.05.22", "01.06.22", "01.07.22"],
    datasets: [{
      label: "добавленные",
      backgroundColor: "#AAA7F8",
      data: [300, 500, 300, 400, 300, 300]
    }, {
      label: "проданные",
      backgroundColor: "#9DDFE0",
      data: [100, 100, 100, 100, 100, 100]
    }]
  };
  var options = {
    plugins: {
      legend: {
        display: false
      }
    }
  };
  var gymsChart = document.getElementById('gyms-facilities');
  var swimmingPoolsChart = document.getElementById('swimming-pools-facilities');
  var typeNewEstateChart = document.getElementById('type-new-estate');
  var typeSellEstateChart = document.getElementById('type-sell-estate');
  var forecastChart = document.getElementById('forecasts');
  var newProjectsChart = document.getElementById('new-projects');
  var sellProjectsChart = document.getElementById('sell-projects');
  var newObjectsChart = document.getElementById('new-objects');
  var myGymsChart = new Chart(gymsChart, {
    type: 'pie',
    data: gymData,
    options: options,
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.labels.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-color\" style=\"background-color: ".concat(chart.data.datasets[0].backgroundColor[i], "\"></span>\n                    <span class=\"legend-title\">").concat(label, "</span>\n                  </div>\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-value\">").concat(chart.data.datasets[0].data[i], "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('gyms-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
  var mySwimmingPoolsChart = new Chart(swimmingPoolsChart, {
    type: 'pie',
    data: swimmingPoolsData,
    options: options,
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.labels.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-color\" style=\"background-color: ".concat(chart.data.datasets[0].backgroundColor[i], "\"></span>\n                    <span class=\"legend-title\">").concat(label, "</span>\n                  </div>\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-value\">").concat(chart.data.datasets[0].data[i], "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('swimming-pools-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
  var myTypeNewEstateChart = new Chart(typeNewEstateChart, {
    type: 'pie',
    data: typeNewEstateData,
    options: options,
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.labels.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-color\" style=\"background-color: ".concat(chart.data.datasets[0].backgroundColor[i], "\"></span>\n                    <span class=\"legend-title\">").concat(label, "</span>\n                  </div>\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-value\">").concat(chart.data.datasets[0].data[i], "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('type-new-estate-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
  var myTypeSellEstateChart = new Chart(typeSellEstateChart, {
    type: 'pie',
    data: typeSellEstateData,
    options: options,
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.labels.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-color\" style=\"background-color: ".concat(chart.data.datasets[0].backgroundColor[i], "\"></span>\n                    <span class=\"legend-title\">").concat(label, "</span>\n                  </div>\n                  <div class=\"legend-inner\">\n                    <span class=\"legend-value\">").concat(chart.data.datasets[0].data[i], "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('type-sell-estate-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
  var myForecast = new Chart(forecastChart, {
    type: 'bar',
    data: forecastsData,
    options: {
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          }
        }
      },
      elements: {
        point: {
          radius: 0
        }
      }
    }
  });
  var myNewProjectsChart = new Chart(newProjectsChart, {
    type: 'bar',
    data: newProjectsData,
    options: {
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          }
        }
      }
    },
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.datasets.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                  <span class=\"legend-color\" style=\"background-color: ".concat(label.backgroundColor, "\"></span>\n                  <span class=\"legend-title\">").concat(label.label, "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('new-projects-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
  var mySellProjectsChart = new Chart(sellProjectsChart, {
    type: 'bar',
    responsive: true,
    data: sellProjectsData,
    options: {
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          }
        }
      }
    },
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.datasets.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                  <span class=\"legend-color\" style=\"background-color: ".concat(label.backgroundColor, "\"></span>\n                  <span class=\"legend-title\">").concat(label.label, "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('sell-projects-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
  var myNewObjectsChart = new Chart(newObjectsChart, {
    type: 'bar',
    responsive: true,
    data: newObjectsData,
    options: {
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          }
        }
      }
    },
    plugins: [{
      beforeInit: function beforeInit(chart, args, options) {
        if (chart.canvas.id === chart.ctx.canvas.id) {
          var ul = document.createElement('ul');
          chart.data.datasets.forEach(function (label, i) {
            ul.innerHTML += "\n                <li class=\"legend-item\">\n                  <div class=\"legend-inner\">\n                  <span class=\"legend-color\" style=\"background-color: ".concat(label.backgroundColor, "\"></span>\n                  <span class=\"legend-title\">").concat(label.label, "</span>\n                  </div>\n                </li>\n              ");
          });
          return document.getElementById('new-objects-legend').appendChild(ul);
        }
        return;
      }
    }]
  });
});